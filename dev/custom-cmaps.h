/**
# Additional colormaps for bview

* *seismic*: blue-to-red diverging map extracted from [matplotlib](https://matplotlib.org/stable/tutorials/colors/colormaps.html), good
for plotting vorticity field.
* *black_body*: sequential black-to-yellow colormap, useful for
the temperature field in combustion simulations (from [rt.c](http://basilisk.fr/sandbox/Antoonvh/rt.c))
*/

void seismic (double cmap[NCMAP][3])
{
  static double basemap[33][3] = {
    {0.000000, 0.000000, 0.300000},
    {0.000000, 0.000000, 0.387843},
    {0.000000, 0.000000, 0.475686},
    {0.000000, 0.000000, 0.563529},
    {0.000000, 0.000000, 0.651373},
    {0.000000, 0.000000, 0.739216},
    {0.000000, 0.000000, 0.827059},
    {0.000000, 0.000000, 0.914902},
    {0.003922, 0.003922, 1.000000},
    {0.129412, 0.129412, 1.000000},
    {0.254902, 0.254902, 1.000000},
    {0.380392, 0.380392, 1.000000},
    {0.505882, 0.505882, 1.000000},
    {0.631373, 0.631373, 1.000000},
    {0.756863, 0.756863, 1.000000},
    {0.882353, 0.882353, 1.000000},
    {1.000000, 0.992157, 0.992157},
    {1.000000, 0.866667, 0.866667},
    {1.000000, 0.741176, 0.741176},
    {1.000000, 0.615686, 0.615686},
    {1.000000, 0.490196, 0.490196},
    {1.000000, 0.364706, 0.364706},
    {1.000000, 0.239216, 0.239216},
    {1.000000, 0.113725, 0.113725},
    {0.994118, 0.000000, 0.000000},
    {0.931373, 0.000000, 0.000000},
    {0.868627, 0.000000, 0.000000},
    {0.805882, 0.000000, 0.000000},
    {0.743137, 0.000000, 0.000000},
    {0.680392, 0.000000, 0.000000},
    {0.617647, 0.000000, 0.000000},
    {0.554902, 0.000000, 0.000000},
    {0.500000, 0.000000, 0.000000},
  };

  for (int i = 0; i < NCMAP; i++) {
    double x = i*(32 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void black_body (double cmap[NCMAP][3])
{
  static double basemap[33][3] = {
    {0.000000, 0.000000, 0.000000},
    {0.085791, 0.030987, 0.017333},
    {0.133175, 0.058869, 0.034680},
    {0.180002, 0.073069, 0.051539},
    {0.229816, 0.084060, 0.064781},
    {0.281398, 0.093913, 0.075409},
    {0.334522, 0.102639, 0.084245},
    {0.388958, 0.110254, 0.092799},
    {0.444612, 0.116733, 0.101403},
    {0.501422, 0.122026, 0.110058},
    {0.559331, 0.126068, 0.118768},
    {0.618286, 0.128768, 0.127532},
    {0.678238, 0.130007, 0.136351},
    {0.712850, 0.181722, 0.130817},
    {0.743632, 0.232650, 0.120992},
    {0.774325, 0.279316, 0.108090},
    {0.804936, 0.323627, 0.090796},
    {0.835473, 0.366525, 0.066236},
    {0.865943, 0.408541, 0.026029},
    {0.876634, 0.464020, 0.017307},
    {0.883455, 0.518984, 0.014963},
    {0.889052, 0.572164, 0.013500},
    {0.893376, 0.624109, 0.013033},
    {0.896370, 0.675180, 0.013680},
    {0.897974, 0.725631, 0.015556},
    {0.898117, 0.775643, 0.018777},
    {0.896720, 0.825351, 0.023459},
    {0.927670, 0.859991, 0.319086},
    {0.956159, 0.893933, 0.503317},
    {0.978271, 0.928565, 0.671307},
    {0.993196, 0.963913, 0.835609},
    {1.000000, 1.000000, 1.000000},
  };

  for (int i = 0; i < NCMAP; i++) {
    double x = i*(31 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

